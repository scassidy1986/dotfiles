#!/bin/bash
#
# Cleans up stale local branches.
#
# Checks for local branches that used to have a remote branch
# but that branch no longer exists. If the branch has no local
# changes that have not been merged into a specific branch then
# the branch is deleted.
#

SCRIPT_NAME=${0##*/}
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

usage() {
cat << USAGE
  Usage: ${SCRIPT_NAME} <branch>
USAGE
}

git rev-parse --is-inside-work-tree &>/dev/null
if [[ ${?} -ne 0 ]]; then
  echo "[${PWD}] is not a git repository!"
  exit 1
fi

current_branch=$(git rev-parse --abbrev-ref HEAD)
target_branch=${1}
if [[ -z "${target_branch}" ]]; then
  target_branch="${current_branch}"
fi

echo "Cleaning branches (current branch: ${current_branch}, target branch: ${target_branch})"

git fetch --prune

branches_without_remote=$(git branch --merged | egrep -v "(^\*|master|develop|staging|${target_branch})")

for branch in ${branches_without_remote}
do
  remote_branches_containing_branch=$(git branch -r --contains ${branch} | grep ${branch} | tr -d '[:space:]')
  if [[ -z "${remote_branches_containing_branch}" ]]; then
    echo "git branch -d ${branch}"
    git branch -d ${branch}
  else
    echo "Not deleting branch ${branch} as it has local changes that have not been merged into ${branch}"
  fi
done
git remote prune origin
