#!/usr/bin/env sh

set -e

SCRIPT_NAME=${0##*/}

if [ -f "${HOME}/.logging" ]; then
  source "${HOME}/.logging"
fi

usage () {
cat << USAGE  
  Usage: ${SCRIPT_NAME} [-q <query>] [-p <port>] [-n <namespace>] [-k <kube_config>] [-r]

  Options
  Required:
    -q  The pattern to match pods with.
    -p  The port to forward.
    -n  The namespace to search for pods. Defaults to 'default'.
   Optional:
    -k  The kubeconfig to use, if different than the current one. Defaults to the value of 'KUBECONFIG'.
    -r  Whether to use random ports. If false, will attempt to use the port to forward + 1 e.g.
        pod-1 -> 8080:8080
        pod-2 -> 8081:8080
        pod-3 -> 8082:8080
  
   Examples:
    ${SCRIPT_NAME} -q apiservice -p 8080
    ${SCRIPT_NAME} -q fluentd -n logging -p 24231 -k ~/.kube/pd-test-1.kubeconfig -r
    KUBECONFIG=\"~/.kube/pd-test-1.kubeconfig\" ${SCRIPT_NAME} -q fluentd -n logging -p 24231
USAGE  
}

query=""
port=
kube_config=${KUBECONFIG}
namespace="default"
use_random_port=false

OPTS="q:p:n:k:rh"
REQUIREDOPTS=("query" "port" "kube_config" "namespace")

while getopts "${OPTS}" opt; do
  case "${opt}" in
    q) query="${OPTARG}" ;;
    p) port="${OPTARG}" ;;
    n) namespace="${OPTARG}" ;;
    k) kube_config="${OPTARG}" ;;
    r) use_random_port=true ;;
    h) usage
       exit 0
       ;;
    *)
     log_error "Invalid Option: -${opt} ${OPTARG}"
     usage
     exit 1
     ;;
  esac
done
shift $((OPTIND -1))

for required in ${REQUIREDOPTS}; do
  if [[ -z "${!required}" ]]; then
    log_error "Required parameter missing"
    usage
    exit 1
  fi
done

pods=($(KUBECONFIG=${kube_config} kubectl --namespace "${namespace}" get pods -o wide --no-headers=true | grep "${query}" | awk '{print $1}'))
if [[ -z ${pods} ]]; then
  log_info "No pods found matching [${query}] in namespace [${namespace}]"
  exit 0
fi

log_info "Found pods ${pods[*]}"

counter=${port}
for pod in "${pods[@]}"; do
  port_to_use=${counter}
  if [ "${use_random_port}" = true ]; then
    port_to_use=""
    log_info "> ${pod} ${port} -> <random>"
  else
    log_info "> ${pod} ${port} -> ${port_to_use}"
  fi
  KUBECONFIG=${kube_config} kubectl --namespace ${namespace} port-forward ${pod} ${port_to_use}:${port} --pod-running-timeout=60s | sed "s/^/[${pod}:${namespace}] /" & 
  counter=$((counter+1))
done

log_info "Ctrl+C to quit"
log_info "Output below:"

for pid in $(jobs -p); do
  wait ${pid}
done

exit 0
