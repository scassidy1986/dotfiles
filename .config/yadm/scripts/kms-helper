#!/bin/bash

if [ -f "${HOME}/.logging" ]; then
  source "${HOME}/.logging"
fi

SCRIPT_NAME=${0##*/}
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

VALID_COMMANDS=("encrypt" "decrypt")
VALID_COMMANDS_STR=$(IFS=$'|'; echo "${VALID_COMMANDS[*]}")

DEFAULT_REGION="us-east-1"

usage() {
cat << USAGE

  Usage: ${SCRIPT_NAME} <command> -r <region> -k <key_alias> -t <content>
  
  ${VALID_COMMANDS_STR}
    The action to perform.
  -k         
    The KMS key to use when encrypting a value.
  -r  ${DEFAULT_REGION}
    Region where the KMS key lives.
  -t 
    The value to encrypt or decrypt.

  ${SCRIPT_NAME} encrypt -k terraform-secrets-product-prod-1 -t "secret_password"
  ${SCRIPT_NAME} decrypt -t "AQICAHgAo5v8YsJZTNHqa6WtDuiMFzVkKYglrpVUghT0JiDwSgHH2u ..."
  ${SCRIPT_NAME} encrypt -r eu-central-1 -k terraform-secrets-product-prod-0 -t "secret_password"
  ${SCRIPT_NAME} decrypt -r eu-central-1 -t "AQICAHgAo5v8YsJZTNHqa6WtDuiMFzVkKYglrpVUghT0JiDwSgHH2u ..."
USAGE
}

validate_required() {
  for required in "${@}"; do
    if [[ -z "${!required}" ]]; then
      echo "Required parameter missing [${required}]"
      usage
      exit 1
    fi
  done
}

encrypt() {
  aws_cli_version="$(echo "$(aws --version)" | cut -d ' ' -f 1 | cut -d / -f 2 | cut -d . -f 1)"
  cmd=(
    "--region" "${1}"
    "--key-id" "${2}"
    "--plaintext" "${3}"
    "--output" "text"
    "--query" "CiphertextBlob"
  )
  [[ "${aws_cli_version}" -gt 1 ]] && cmd+=("--cli-binary-format" "raw-in-base64-out")

  echo "$(aws kms encrypt ${cmd[*]})"
}

decrypt() {
  decrypted=$(aws kms decrypt --region ${1} --ciphertext-blob fileb://<(echo ${2} | base64 -D) --output text --query Plaintext)
  echo "$(echo "${decrypted}" | base64 -D)"
}

region="${DEFAULT_REGION}"
key_alias=""
text=""

OPTS="r:k:t:h"
REQUIREDOPTS=("region" "key_alias" "text")

command="${1}"; shift
if ! [[ "${command}" =~ ^(${VALID_COMMANDS_STR})$ ]]; 
then 
  echo "Command [${command}] must be one of ${VALID_COMMANDS_STR}"
  usage
  exit 1
fi

while getopts "${OPTS}" opt; do
  case "${opt}" in
    k) key_alias="${OPTARG}" ;;
    r) region="${OPTARG}" ;;
    t) text="${OPTARG}" ;;
    h) usage
       exit 0
       ;;
    *)
     log_error "Invalid Option: -${opt} ${OPTARG}"
     usage
     exit 1
     ;;
  esac
done
shift $((OPTIND -1))

case ${command} in
  encrypt)
    validate_required "region" "key_alias" "text"
    encrypt "${region}" "${key_alias}" "${text}"
    exit 0
    ;;
  decrypt)
    validate_required "region" "text"
    decrypt "${region}" "${text}"
    exit 0
    ;;
  *)
    usage
    exit 1
esac
