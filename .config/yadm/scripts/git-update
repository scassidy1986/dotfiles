#!/bin/bash
#
# Updates the branch.
#
# Updates to the specified branch, or if no branch given,
# the current working branch.
#

SCRIPT_NAME=${0##*/}
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

usage() {
cat << USAGE
  Usage: ${SCRIPT_NAME} <branch> --clean-branches
USAGE
}

git rev-parse --is-inside-work-tree &>/dev/null
if [[ ${?} -ne 0 ]]; then
  echo "[${PWD}] is not a git repository!"
  exit 1
fi

clean_branches=1

SHORTOPTS="ch"
LONGOPTS="clean-branches,help"
REQUIREDOPTS=("branch")
if ! options=$(getopt -n "${SCRIPT_NAME}" -o "${SHORTOPTS}" -l "${LONGOPTS}" -- "${@}"); then
  echo "Unable to set cli options"
  exit 1
fi

eval set -- "${options}"
while [ $# -gt 0 ]; do
  case "$1" in
    -c|--clean-branches) clean_branches=0 ;;
    -h|--help) usage; exit 0 ;;
    --) shift; break ;;
    *) break ;;
  esac
  shift
done

current_branch=$(git rev-parse --abbrev-ref HEAD)
branch=${1:-${current_branch}}
if [[ -z "${branch}" ]]; then
  branch="${current_branch}"
fi

# Validation...
for required in "${REQUIREDOPTS[@]}"; do
  if [[ -z "${!required}" ]]; then
    echoerr "Required parameter missing [${required}]"
    usage
    exit 1
  fi
done

git fetch -p
if [[ "${branch}" == "${current_branch}" ]]; then
  echo "Updating [${branch}]"
else
  echo "Switching from [${current_branch}] to [${branch}]"
  git checkout ${branch}
fi
git up
if [[ "${clean_branches}" -eq 0 ]]; then
  git-clean-branches "${branch}"
fi

exit 0
