#!/usr/bin/env sh

SCRIPT_NAME=${0##*/}

if [ -e ${HOME}/.logging ]; then
  source ${HOME}/.logging
else
  function log_info () {
    echo "[INFO] \033[0;32m${1}\033[0m"
  }
  function log_error () {
    echo "[ERROR] \033[0;31m${1}\033[0m"
  }
fi

function usage () {
  echo "Usage: ${SCRIPT_NAME} -q <query> -p <port> -n <namespace>"
  echo "   -q --query       The pattern to match pods with."
  echo "   -p --port        The port to forward."
  echo "   -n --namespace   The namespace to search for pods."
  echo "   -r --random-port Whether to use random ports."
}

function random_port () {
  while true
  do
    random_port=$(( ((RANDOM<<15)|RANDOM) % 49152 + 10000 ))
    status="$(nc -z 127.0.0.1 ${random_port} < /dev/null &>/dev/null; echo $?)"
    if [ "${status}" != "0" ]; then
      echo ${random_port}
      return
    fi
  done
}

query=""
port=
namespace="default"
use_random_port=false

SHORTOPTS="q:p:n:r"
LONGOPTS="query:,port:,namespace:,random-port"
REQUIREDOPTS=("query port")
if ! options=$(getopt -n "${SCRIPT_NAME}" -o "${SHORTOPTS}" -l "${LONGOPTS}" -- "$@"); then
  log_error "Unable to set cli options"
  exit 1
fi

eval set -- "${options}"
while [ $# -gt 0 ]; do
  case "$1" in
    -q|--query) shift; query="${1}" ;;
    -p|--port) shift; port="${1}" ;;
    -n|--namespace) shift; namespace="${1}" ;;
    -r|--random-port) use_random_port=true ;;
    -h|--help) usage; exit 0 ;;
    --) shift; break ;;
    *) break ;;
  esac
  shift
done

for required in ${REQUIREDOPTS}; do
  if [[ -z "${!required}" ]]; then
    log_error "Required parameter missing [${required}]"
    usage
    exit 1
  fi
done

pods=($(kubectl --namespace "${namespace}" get pods -o wide --no-headers=true | grep "${query}" | awk '{print $1}'))
if [[ -z ${pods} ]]; then
  log_info "No pods found matching [${query}] in namespace [${namespace}]"
  exit 0
fi

log_info "Found pods ${pods[*]}"

counter=${port}
for pod in "${pods[@]}"; do
  port_to_use=${counter}
  if [ "${use_random_port}" = true ]; then
    port_to_use=$(random_port)
  fi
  kubectl --namespace ${namespace} port-forward ${pod} ${port_to_use}:${port} &
  log_info "> ${pod} ${port} -> ${port_to_use}"
  counter=$((counter+1))
done

log_info "Ctrl+C to quit"
log_info "Output below:"

for pid in $(jobs -p); do
  wait ${pid}
done

