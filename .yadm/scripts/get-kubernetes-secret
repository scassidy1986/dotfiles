#!/usr/bin/env sh

set -e

if [ -e ${HOME}/.logging ]; then
  source ${HOME}/.logging
else
  function log_info () {
    echo "[INFO] \033[0;32m${1}\033[0m"
  }
  function log_error () {
    echo "[ERROR] \033[0;31m${1}\033[0m"
  }
fi

DEFAULT_NAMESPACE="kube-system"
SCRIPT_NAME=${0##*/}

function banner () {
  echo "========================================================================="
}

function usage () {
  echo "Usage: ${SCRIPT_NAME} -s <secret> -n <namespace>"
  echo "   -s --secret      the secret to retrieve. Partial secret names will return all matching tokens"
  echo "   -l --list        list all possible secrets and tokens"
  echo "   -n --namespace   the namespace to search. Defaults to ${DEFAULT_NAMESPACE}"
  echo "   -k --kubeconfig  the kube config to use. Defaults to the environment variable 'KUBECONFIG'"
  echo "   -q --quiet       suppress output"
}

SHORTOPTS="s:n:k:lhq"
LONGOPTS="secret:,namespace:,kubeconfig:,list,help,quiet"
REQUIREDOPTS=("kube_config")
ARGS=$(getopt -s bash --options "${SHORTOPTS}" --longoptions "${LONGOPTS}" --name "${SCRIPT_NAME}" -- "$@" )

secrets=()
list=0
quiet=0
kube_config=${KUBECONFIG}
namespace=${DEFAULT_NAMESPACE}

eval set -- "${ARGS}"
while true; do
  case $1 in
    -s|--secret)
      shift
      secrets+=("${1}")
      ;;
    -n|--namespace)
      shift
      namespace="${1}"
      ;;
    -k|--kubeconfig)
      shift
      kube_config="${1}"
      ;;
    -l|--list)
      list=1
      ;;
    -q|--quiet)
      quiet=1
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      shift
      break
      ;;
  esac
  shift
done

for required in ${REQUIREDOPTS}; do
  if [[ -z "${!required}" ]]; then
    log_error "Required parameter missing [${required}]"
    usage
    exit 1
  fi
done

if [[ ${list} -eq 0 ]] && [ ${#secrets[@]} -eq 0 ]; then
  log_error "Must specify either list all or a secret to search for"
  usage
  exit 1
fi

if [[ ${quiet} -eq 0 ]]; then
  log_info "Attempting to retrieve the following from kubernetes using kubectl config [${KUBECONFIG}] from namespace [${namespace}]..."
fi

json=$(KUBECONFIG=${kube_config} kubectl get secrets -n ${namespace} -o json)
results=()
if [[ ${list} -eq 1 ]]; then
  results+=("$(echo "${json}" | jq -r '.items[] | select(.metadata.name) | [.metadata.name, .data.token] | @tsv')")
else
  for secret in "${secrets[@]}";
  do
    results+=("$(echo "${json}" | jq -r --arg VAL "${secret}" '.items[] | select(.metadata.name | contains($VAL)) | [.metadata.name, .data.token] | @tsv')")
  done
fi

for r in "${results[@]}"; do
  echo "${r}" | while IFS=$'\t' read -r name token; do
    if [[ ! -z "${token}" ]]; then
      if [[ ${quiet} -eq 0 ]]; then
        log_info "${name}"
        banner
        echo "\"$(echo ${token} | base64 --decode)\""
        banner
      else
        echo "\"$(echo ${token} | base64 --decode)\""
      fi
    fi
  done
done

if [[ ${quiet} -eq 0 ]]; then
  log_info "Done!"
fi

exit 0
